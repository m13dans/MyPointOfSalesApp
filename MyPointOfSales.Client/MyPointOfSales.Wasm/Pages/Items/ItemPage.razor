@page "/items/"
@inject IHttpClientFactory _http
@inject NavigationManager _navigator
@inject AuthenticationStateProvider _authStateProvider
@attribute [Authorize]


<div class="mx-4">
	<span>Tambah Item</span>
	<p>Yo</p>
	<MudIconButton OnClick="@(() => _navigator.NavigateTo("/items/create"))" Icon="@Icons.Material.Outlined.Add">Tambah
		Item</MudIconButton>
</div>
<MudDataGrid T="ItemModel" Items="@Items" ReadOnly="@_readOnly" Bordered="true" Dense="true"
	EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
	<Columns>
		<PropertyColumn Property="x => x.Id" Title="Id" Editable="false" />
		<PropertyColumn Property="x => x.NamaBarang" Title="Nama Barang" />
		<PropertyColumn Property="x => x.Kategori" Title="Kategori" />
		<PropertyColumn Property="x => x.Harga" />
		<PropertyColumn Property="x => x.StokAwal" Title="Stok"></PropertyColumn>
		<TemplateColumn Title="Gambar">
			<CellTemplate>
				<MudImage Src="@GetFullImageUrl(context.Item.UrlGambar)" Alt="@GetFullImageUrl(context.Item.UrlGambar)"
					Width="50" Height="50">
				</MudImage>
			</CellTemplate>
		</TemplateColumn>
		<TemplateColumn>
			<CellTemplate>
				<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit"
					OnClick="@(() => _navigator.NavigateTo($"items/update?Id={@context.Item.Id}"))" />
				<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete"
					OnClick="@(() => DeleteItem(@context.Item.Id))" />
			</CellTemplate>
		</TemplateColumn>
	</Columns>
</MudDataGrid>

@foreach (var item in Items)
{
	<p>@GetFullImageUrl(item.UrlGambar)</p>
}


@code {
	private IEnumerable<ItemModel> Items = [];
	private bool _readOnly;
	private bool _isCellEditMode;
	private List<string> _events = new();
	private bool _editTriggerRowClick;

	protected override async Task OnInitializedAsync()
	{
		var response = await _http.CreateClient("PosAPI").GetFromJsonAsync<List<ItemModel>>("api/items");

		Items = response ?? [];
	}

	private string GetFullImageUrl(string relativeUrl)
	{
		// Check if the URL is already absolute
		if (Uri.IsWellFormedUriString(relativeUrl, UriKind.Absolute))
		{
			return relativeUrl;
		}

		Console.WriteLine(relativeUrl);

		// Prepend the API base URL if it's a relative URL
		var apiBaseUrl = "https://localhost:7260/";
		var result = $"{apiBaseUrl.TrimEnd('/')}/{relativeUrl.TrimStart('/')}";
		Console.WriteLine(result);
		return result;
	}

	private async Task DeleteItem(int id)
	{
		var response = await _http.CreateClient("PosAPI").DeleteAsync($"api/items/{id}");
		(_authStateProvider as CustomAuthStateProvider)!.NotifyAuthState();
		_navigator.NavigateTo("/items");
	}

}
